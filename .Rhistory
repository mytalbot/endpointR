}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
main ="test"
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
uprcol = "darkgreen"
lwrcol = "magenta"
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, value = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
result
library(endpointR)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
td
result
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
i =15
td        = as.numeric(ep_select(gliodat, i))
org       = F
wl        = 6
SDwdth    = 2
mad       = F
cex       = 1.4
cex.lab   = 1.2
blind     = F
ignupr    = FALSE
ylim      = c(90,105) #c(300,350),
xlim      = c(0,28)
xlab      = "day"
ylab      = "MA"
cex.axis  = 1
cex.lab   = 1
ltype     = "b"
pch       = 19
dotcolor  = "black"
main      ="test"
uprcol    = "darkgreen"
lwrcol    = "magenta"
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
blind     = F
ignupr    = FALSE
ylim      = c(90,120) #c(300,350),
xlim      = c(0,28)
xlab      = "day"
ylab      = "MA"
cex.axis  = 1
cex.lab   = 1
ltype     = "b"
pch       = 19
dotcolor  = "black"
main      ="test"
uprcol    = "darkgreen"
lwrcol    = "magenta"
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
ignupr
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
lower.time.idx
result           <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result           <- result[order(result$timepoint, decreasing = F),]
result
lower.time.idx
length(W)
timepoint
lower.time.idx
round(W[lower.time.idx],2)
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
lower.time.idx
lower.time.idx
length(lower.time.idx)
if(is.na(lower.time.idx))
)
is.na(lower.time.idx)
if(is.na(lower.time.idx)==TRUE)
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
if(is.na(lower.time.idx)==TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
result
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
lower.time.idx
if(is.na(lower.time.idx)!=TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
result
is.na(lower.time.idx)
lower.time.idx
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, value = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
result
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
tp         <- c()
fp         <- c()
no_fa      <- c()
SP         <- NULL
for(i in 1:63){
SP       <- NULL
SP       <- epR(as.numeric(ep_select(gliodat, i)), blind = TRUE )
# if default... -----------------------------------------------------------
default    <- ifelse((length(SP) == 0) == TRUE,1,0)
if(default == 1){
tp[i]    <- NA
fp[i]    <- NA
no_fa[i] <- NA
}else{
tp[i]    <- ifelse(sum(SP$timepoint       == unique(SP$n), na.rm = TRUE) == 1, 1, 0)
fp[i]    <- ifelse( (length(SP$timepoint) != unique(SP$n)) == TRUE, 1, 0)
no_fa[i] <- sum(SP$timepoint              != unique(SP$n), na.rm = TRUE)
}
}
tp
fp
no_fa
warnings()
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
if(is.na(lower.time.idx)!=TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
is.na(lower.time.idx)
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
tp         <- c()
fp         <- c()
no_fa      <- c()
SP         <- NULL
for(i in 1:63){
SP       <- NULL
SP       <- epR(as.numeric(ep_select(gliodat, i)), blind = TRUE )
# if default... -----------------------------------------------------------
default    <- ifelse((length(SP) == 0) == TRUE,1,0)
if(default == 1){
tp[i]    <- NA
fp[i]    <- NA
no_fa[i] <- NA
}else{
tp[i]    <- ifelse(sum(SP$timepoint       == unique(SP$n), na.rm = TRUE) == 1, 1, 0)
fp[i]    <- ifelse( (length(SP$timepoint) != unique(SP$n)) == TRUE, 1, 0)
no_fa[i] <- sum(SP$timepoint              != unique(SP$n), na.rm = TRUE)
}
}
tp
fp
no_fa
lower.time.idx
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
tp         <- c()
fp         <- c()
no_fa      <- c()
SP         <- NULL
for(i in 1:63){
SP       <- NULL
SP       <- epR(as.numeric(ep_select(gliodat, i)), blind = TRUE )
# if default... -----------------------------------------------------------
default    <- ifelse((length(SP) == 0) == TRUE,1,0)
if(default == 1){
tp[i]    <- NA
fp[i]    <- NA
no_fa[i] <- NA
}else{
tp[i]    <- ifelse(sum(SP$timepoint       == unique(SP$n), na.rm = TRUE) == 1, 1, 0)
fp[i]    <- ifelse( (length(SP$timepoint) != unique(SP$n)) == TRUE, 1, 0)
no_fa[i] <- sum(SP$timepoint              != unique(SP$n), na.rm = TRUE)
}
}
tp
fp
no_fa
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
library(endpointR)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
library(endpointR)
tp         <- c()
fp         <- c()
no_fa      <- c()
SP         <- NULL
for(i in 1:63){
SP       <- NULL
SP       <- epR(as.numeric(ep_select(gliodat, i)), blind = TRUE )
# if default... -----------------------------------------------------------
default    <- ifelse((length(SP) == 0) == TRUE,1,0)
if(default == 1){
tp[i]    <- NA
fp[i]    <- NA
no_fa[i] <- NA
}else{
tp[i]    <- ifelse(sum(SP$timepoint       == unique(SP$n), na.rm = TRUE) == 1, 1, 0)
fp[i]    <- ifelse( (length(SP$timepoint) != unique(SP$n)) == TRUE, 1, 0)
no_fa[i] <- sum(SP$timepoint              != unique(SP$n), na.rm = TRUE)
}
}
tp
fp
no_fa
tp         <- c()
fp         <- c()
no_fa      <- c()
SP         <- NULL
for(i in 1:63){
SP       <- NULL
SP       <- epR(as.numeric(ep_select(gliodat, i)), blind = TRUE )
# if default... -----------------------------------------------------------
default    <- ifelse((length(SP) == 0) == TRUE,1,0)
if(default == 1){
tp[i]    <- NA
fp[i]    <- NA
no_fa[i] <- NA
}else{
tp[i]    <- ifelse(sum(SP$timepoint       == unique(SP$n), na.rm = TRUE) == 1, 1, 0)
fp[i]    <- ifelse( (length(SP$timepoint) != unique(SP$n)) == TRUE, 1, 0)
no_fa[i] <- sum(SP$timepoint              != unique(SP$n), na.rm = TRUE)
}
}
ep_perf      <- data.frame(tp=tp, fp=fp, fa=no_fa)
ep_perf
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
mean(ep_perf$fa)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_perf.R', echo=TRUE)
