library(endpointR)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
W
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
td        = td
org       = F
wl        = 6
SDwdth    = 2
mad       = F
cex       = 1.4
cex.lab   = 1.2
blind     = F
ignupr    = FALSE
ylim      = c(90,105)
xlim      = c(0,28)
xlab      = "day"
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
result[order(result$timepoint, decreasing = F),]
data.frame(n = length(W), timepoint = lower.time.idx)
td
td[20]
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, W[lower.time.idx] ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
result
lower.time.idx
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
library(endpointR)
file      <- "C:/MHH Bleich/Papers/Schwabe App/Data/test/Validation_data.txt"
testdata  <- ep_load(file )
a         <- 40 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = F,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
result
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
td        = td
org       = F
wl        = 6
SDwdth    = 2
mad       = F
cex       = 1.4
cex.lab   = 1.2
blind     = F
ignupr    = FALSE
ylim      = c(90,105)
xlim      = c(0,28)
xlab      = "day"
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
lower.time.idx
W[lower.time.idx]
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw=W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
result
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw=W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw=W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, bw=W[lower.time.idx] ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw=W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, bw=W[upr.time.idx] ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw=W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
upr.time.idx
data.frame(n = length(W), timepoint = upr.time.idx, bw=W[upr.time.idx] )
W
upr.time.idx
W[upr.time.idx]
if(all(is.na(W[upr.time.idx])) == TRUE) NA
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw=W[lower.time.idx])
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, bw=if(all(is.na(W[upr.time.idx])) == TRUE) NA else W[upr.time.idx] ) )
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
result
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
data.frame(n = length(W), timepoint = upr.time.idx,
bw = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2)))
round(W[upr.time.idx],2)
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw = round(W[lower.time.idx]),2)
result           <- result[order(result$timepoint, decreasing = F),]
result
td        = td
org       = F
wl        = 6
SDwdth    = 2
mad       = F
cex       = 1.4
cex.lab   = 1.2
blind     = F
ignupr    = FALSE
ylim      = c(90,105)
xlim      = c(0,28)
xlab      = "day"
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw = round(W[lower.time.idx]),2)
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
rbind(result, data.frame(n = length(W), timepoint = upr.time.idx))
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw = round(W[lower.time.idx]),2)
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx))
result
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
result
round(W[lower.time.idx],2)
round(W[upr.time.idx],2)
if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2)
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx, bw = round(W[lower.time.idx],2))
result           <- result[order(result$timepoint, decreasing = F),]
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx, bw = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
result
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/endpointR/R/endpoint.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
source('C:/MHH Bleich/Packages/epR_testscript.R', echo=TRUE)
