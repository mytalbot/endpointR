# myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
}else{}
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
}else{}
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
# capture errors if there are no lower threshold violations
if(all(is.na(lower.time.idx)) != TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx,
value = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
return(result)
}
library(endpointR)
file      <- "C:/MHH Bleich/Papers/Schwabe App/Data/test/Validation_data.txt"
testdata  <- ep_load(file )
a         <- 1 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
epR <- function(td = td, org=FALSE, wl = 6, SDwdth = 2, mad=FALSE, ltype = "b", dotcolor = "black", uprcol = "darkgreen",
lwrcol = "magenta", cex = 1, cex.axis = 1, cex.lab = 1, xlim = NULL, ylim = NULL, pch = 19, blind = FALSE,
ignupr = FALSE, xlab = "time", ylab = "Moving average (%)", main = NULL){
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
# myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
}else{}
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
}else{}
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
# capture errors if there are no lower threshold violations
if(all(is.na(lower.time.idx)) != TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx,
value = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
return(result)
}
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
a         <- 2 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
epR <- function(td = td, org=FALSE, wl = 6, SDwdth = 2, mad=FALSE, ltype = "b", dotcolor = "black", uprcol = "darkgreen",
lwrcol = "magenta", cex = 1, cex.axis = 1, cex.lab = 1, xlim = NULL, ylim = NULL, pch = 19, blind = FALSE,
ignupr = FALSE, xlab = "time", ylab = "Moving average (%)", main = NULL){
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
# myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
}else{}
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
}else{}
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
# capture errors if there are no lower threshold violations
if(all(is.na(lower.time.idx)) != TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx,
value = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
return(result)
}
a         <- 2 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
a         <- 3 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
a         <- 4 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
a         <- 5 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
epR <- function(td = td, org=FALSE, wl = 6, SDwdth = 2, mad=FALSE, ltype = "b", dotcolor = "black", uprcol = "darkgreen",
lwrcol = "magenta", cex = 1, cex.axis = 1, cex.lab = 1, xlim = NULL, ylim = NULL, pch = 19, blind = FALSE,
ignupr = FALSE, xlab = "time", ylab = "Moving average (%)", main = NULL){
# essentials --------------------------------------------------------------
pointlength    <- length(td)
xachse         <- seq(1,pointlength)
if(org == TRUE){
W            <- td
}else{
epdat        <- (td / td[1])*100
# calculate windowed moving average ---------------------------------------
W <- c()
S <- c()
for (i in wl:pointlength ){
floeating.mean <- mean(epdat[i:(i-(wl-1))])
w              <- (epdat[i] / floeating.mean) * 100
W[i]           <- w
}
W[1:wl]<- rep(100,wl)
}
# calculate backwards windowed SD and mean --------------------------------
mysd   <- c()
mymean <- c()
for (i in pointlength:wl){
mySD     <- sd(W[(i-1):(i-wl)],   na.rm=TRUE)
mysd[i]  <- mySD
myMean   <- mean(W[(i-1):(i-wl)], na.rm=TRUE)
mymean[i]<- myMean
}
mysd[mysd==0] <- NA # remove 0, otherwise first point gets X-ed
mysd       <-  mysd*SDwdth
# calculate MAD -----------------------------------------------------------
if(mad==TRUE){
myMAD <- c()
for (i in wl:pointlength ){
myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
# myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
}
myMAD      <- round(myMAD,2)
# constrain SD by MAD -----------------------------------------------------
madscore   <- ceiling(abs(myMAD))
madscore[madscore == 0] <-1
mysd       <- mysd / madscore
}else{}
# plotting ----------------------------------------------------------------
if(blind==FALSE){
plot(xachse,
W,
type     = ltype,
pch      = pch,
col      = dotcolor,
xlim     = xlim,
ylim     = ylim,
cex.lab  = cex.lab,
cex.axis = cex.axis,
cex      = cex,
xlab     = xlab,
ylab     = ylab,
main     = main)
lines(xachse, mymean + mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
lines(xachse, mymean - mysd, col="blue", lty = 2, cex = .5, lwd = 2.5)
abline(h = 100, col = "black",  lwd = 2, lty = 3)
abline(v = wl , col = "gray40", lwd = 1, lty = 3)
}else{}
# diagnostics -------------------------------------------------------------
result <- NULL
if(ignupr==TRUE){
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
result           <- data.frame(n = length(W), timepoint = lower.time.idx)
result$where     <- rep("lower", length(lower.time.idx))
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
}else{}
}else{
lower            <- which(W < mymean - mysd)
lower.time.idx   <- if(length(lower) == 0) NA else lower
# capture errors if there are no lower threshold violations
if(all(is.na(lower.time.idx)) != TRUE){
result         <- data.frame(n = length(W), timepoint = lower.time.idx, value = round(W[lower.time.idx],2))
result         <- result[order(result$timepoint, decreasing = F),]
}else{
result         <- data.frame(n = length(W), timepoint = NA, value =NA)
result         <- result[order(result$timepoint, decreasing = F),]
}
upr              <- which(W > mymean + mysd)
upr.time.idx     <- if(length(upr) == 0) NA else upr
result           <- rbind(result, data.frame(n = length(W), timepoint = upr.time.idx,
value = if(all(is.na(W[upr.time.idx])) == TRUE) NA else round(W[upr.time.idx],2) ))
result$where     <- append(rep("lower", length(lower.time.idx)), rep("upper", length(upr.time.idx)) )
if(blind==FALSE){
points(which(W< mymean-mysd), W[which(W< mymean-mysd)], col = lwrcol, pch = 4, cex = 3, lwd = 3)
points(which(W> mymean+mysd), W[which(W> mymean+mysd)], col = uprcol, pch = 4, cex = 3, lwd = 3)
}else{}
}
if(all(is.na(result$timepoint)) == TRUE){
result           <- data.frame(n = length(W), timepoint = NA, where = NA)
}else{
result           <- result[complete.cases(result), ]
}
return(result)
}
a         <- 5 #50
td        <- ep_select(testdata, a) #td        <- ep_select(testdata, "WZ12")
result    <- epR(td        = td,
org       = F,
wl        = 6,
SDwdth    = 2,
mad       = T,
cex       = 1.4,
cex.lab   = 1.2,
blind     = F,
ignupr    = FALSE,
ylim      = c(90,105), #c(300,350),
xlim      = c(0,28),
xlab      = "day")
result
myMAD <- c()
for (i in wl:pointlength ){
# myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
print(mean(W[(i):((i)-(wl-1))]) - W[i])
}
myMAD <- c()
for (i in wl:pointlength ){
# myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
print(mean(W[(i):((i)-(wl-1))]) )
}
myMAD <- c()
for (i in wl:pointlength ){
# myMAD[i] <- mean(W[(i-1):((i-1)-(wl-1))]) - W[i]
myMAD[i] <- mean(W[(i):((i)-(wl-1))]) - W[i]
print((W[(i):((i)-(wl-1))]) )
}
